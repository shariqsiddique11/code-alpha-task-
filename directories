#include <iostream>
#include <fstream>
#include <string>
#include <windows.h>

void listFiles(const std::string& path) {
    WIN32_FIND_DATA findFileData;
    HANDLE hFind = FindFirstFile((path + "\\*").c_str(), &findFileData);

    if (hFind == INVALID_HANDLE_VALUE) {
        std::cerr << "Failed to open directory: " << path << std::endl;
        return;
    }

    do {
        // Skip the "." and ".." entries
        if (strcmp(findFileData.cFileName, ".") != 0 && strcmp(findFileData.cFileName, "..") != 0) {
            std::cout << findFileData.cFileName << std::endl;
        }
    } while (FindNextFile(hFind, &findFileData) != 0);

    FindClose(hFind);
}

void changeDirectory(std::string& currentDir, const std::string& newDir) {
    if (SetCurrentDirectory(newDir.c_str())) {
        currentDir = newDir;
        std::cout << "Changed directory to " << currentDir << std::endl;
    } else {
        std::cerr << "Directory does not exist!" << std::endl;
    }
}

void createDirectory(const std::string& path) {
    if (CreateDirectory(path.c_str(), NULL) || GetLastError() == ERROR_ALREADY_EXISTS) {
        std::cout << "Directory created: " << path << std::endl;
    } else {
        std::cerr << "Failed to create directory!" << std::endl;
    }
}

void copyFile(const std::string& source, const std::string& destination) {
    if (CopyFile(source.c_str(), destination.c_str(), FALSE)) {
        std::cout << "File copied from " << source << " to " << destination << std::endl;
    } else {
        std::cerr << "Error copying file!" << std::endl;
    }
}

void moveFile(const std::string& source, const std::string& destination) {
    if (MoveFile(source.c_str(), destination.c_str())) {
        std::cout << "File moved from " << source << " to " << destination << std::endl;
    } else {
        std::cerr << "Error moving file!" << std::endl;
    }
}

int main() {
    char buffer[MAX_PATH];
    GetCurrentDirectory(MAX_PATH, buffer); // Get the current working directory
    std::string currentDir = buffer;
    std::string command;

    while (true) {
        std::cout << "\nCurrent Directory: " << currentDir << "\n";
        std::cout << "Available commands: \n";
        std::cout << "ls  - List files\n";
        std::cout << "cd <path>  - Change directory\n";
        std::cout << "mkdir <dir>  - Create directory\n";
        std::cout << "cp <source> <destination>  - Copy file\n";
        std::cout << "mv <source> <destination>  - Move file\n";
        std::cout << "exit  - Exit the file manager\n";
        std::cout << "Enter command: ";
        std::getline(std::cin, command);

        if (command == "exit") {
            break;
        } else if (command == "ls") {
            listFiles(currentDir);
        } else if (command.substr(0, 2) == "cd") {
            std::string path = command.substr(3);
            changeDirectory(currentDir, path);
        } else if (command.substr(0, 6) == "mkdir ") {
            std::string dir = command.substr(6);
            createDirectory(dir);
        } else if (command.substr(0, 3) == "cp ") {
            size_t spacePos = command.find(" ", 3);
            if (spacePos != std::string::npos) {
                std::string source = command.substr(3, spacePos - 3);
                std::string destination = command.substr(spacePos + 1);
                copyFile(source, destination);
            }
        } else if (command.substr(0, 3) == "mv ") {
            size_t spacePos = command.find(" ", 3);
            if (spacePos != std::string::npos) {
                std::string source = command.substr(3, spacePos - 3);
                std::string destination = command.substr(spacePos + 1);
                moveFile(source, destination);
            }
        } else {
            std::cerr << "Invalid command!" << std::endl;
        }
    }

    return 0;
}

